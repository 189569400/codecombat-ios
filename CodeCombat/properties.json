[
  {"name":"attack","type":"function","description":"The `attack` method makes the #{spriteName} try to attack the `target` unit, or move toward `target` if it's further than the `attackRange` of `#{attackRange}m` (and the #{spriteName} is smart enough).","args":[{"name":"target","type":"object","example":{"javascript":"this.getNearestEnemy()","python":"self.getNearestEnemy()"},"description":"The target enemy to attack.","default":""}],"snippets":{"javascript":{"code":"this.attack(${1:target})","tab":"attack"},"python":{"code":"self.attack(${1:target})","tab":"attack"}}},
  {"name":"distanceTo","type":"function","description":"Returns the distance in meters to the `target` unit from the center of the #{spriteName}.","args":[{"name":"target","type":"object","example":"this.getNearestEnemy()","description":"The target unit whose distance you want to measure.","default":""}],"snippets":{"javascript":{"code":"this.distanceTo(${1:target})","tab":"distanceTo"},"python":{"code":"self.distanceTo(${1:target})","tab":"distanceTo"}}},
  {"name":"getEnemies","type":"function","description":"Returns an array of all living enemies within eyesight (#{visualRange}m and line-of-sight).","example":{"javascript":"var enemies = this.getEnemies();\nfor(var i = 0; i < enemies.length; ++i) {\n  var enemy = enemies[i];\n  // Do something with each enemy here\n  this.attack(enemy);  // Example\n}","coffeescript":"enemies = @getEnemies()\nfor enemy in enemies\n  # Do something with each enemy here\n  @attack enemy  # Example\n","python":"enemies = self.getEnemies()\nfor enemy in enemies:\n  # Do something with each enemy here\n  self.attack(enemy)  # Example"},"snippets":{"coffeescript":{"code":"@getEnemies()","tab":"getEnemies"},"javascript":{"code":"this.getEnemies()","tab":"getEnemies"},"python":{"code":"self.getEnemies()","tab":"getEnemies"}}},
  {"name":"getFriends","type":"function","description":"Returns an array of all living friends within eyesight (#{visualRange}m).","example":{"javascript":"var friends = this.getFriends();\nfor(var i = 0; i < friends.length; ++i) {\n  var friend = friends[i];\n  // Do something with each friend here\n  this.follow(friend);  // Example\n}","coffeescript":"friends = @getFriends()\nfor friend in friends\n  # Do something with each friend here\n  @follow friend  # Example","python":"friends = self.getFriends()\nfor friend in friends:\n  # Do something with each friend here\n  self.follow(friend)  # Example\n"},"snippets":{"javascript":{"code":"this.getFriends()","tab":"getFriends"},"coffeescript":{"code":"@getFriends()","tab":"getFriends"},"python":{"code":"self.getFriends()","tab":"getFriends"}}},
  {"name":"getNearest","type":"function","description":"Returns the closest unit out of an array of units, or null if the array is empty.","args":[{"name":"units","type":"array","example":{"javascript":"this.getItems()","coffeescript":"@getItems()","python":"self.getItems()"},"description":""}],"snippets":{"coffeescript":{"code":"@getNearest ${1:enemies}","tab":"getNearest"},"javascript":{"code":"this.getNearest(${1:enemies})","tab":"getNearest"},"python":{"code":"self.getNearest(${1:enemies})","tab":"getNearest"}}},
  {"name":"hasEffect","type":"function","description":"Returns whether the `spriteName` is currently affected by the given effect.","args":[{"name":"effect","type":"string","example":"\"shrink\"","description":""}],"owner":"this","snippets":{"javascript":{"code":"this.hasEffect(${1:effect})","tab":"hasEffect"},"python":{"code":"self.hasEffect(${1:effect})","tab":"hasEffect"}}},
  {"name":"health","type":"number","description":"How many health points the #{spriteName} has left.","snippets":{"javascript":{"code":"this.health","tab":"health"},"coffeescript":{"code":"@health","tab":"health"},"python":{"code":"self.health","tab":"health"}}},
  {"name":"maxHealth","type":"number","description":"How many health points the #{spriteName} can have, maximum.","snippets":{"javascript":{"code":"this.health","tab":"health"},"coffeescript":{"code":"@health","tab":"health"},"python":{"code":"self.health","tab":"maxHealth"}}},
  {"name":"move","type":"function","description":"The `move` method sets the #{spriteName}'s `targetPos` to the given `(x, y)` coordinates and also sets the #{spriteName}'s `action` to `move`.","args":[{"name":"targetPos","type":"object","example":"{x: 24, y: 35}","description":"","default":""}],"snippets":{"javascript":{"code":"this.move(${1:target.pos})","tab":"move"},"coffeescript":{"code":"@move ${1:target.pos}","tab":"move"},"python":{"code":"self.move(${1:target.pos})","tab":"move"}}},
  {"name":"pos","type":"object","description":"The `x` (horizontal) and `y` (vertical) coordinates of the #{spriteName}'s center.","snippets":{"javascript":{"code":"this.pos","tab":"pos"},"python":{"code":"self.pos","tab":"pos"}}},
  {"name":"powerUp","type":"function","description":"The #{spriteName} powers up his next attack, which in Sky Span then does 5x normal attack damage."},
  {"name":"say","type":"function","description":"Makes the #{spriteName} say the given message. Anything within #{voiceRange} meters will hear it.","args":[{"name":"message","type":"string","example":"\"Follow me!\"","description":"","default":""},{"name":"data","type":"object","example":"{strategy: 'kamikaze', to: {x: 10, y: 20}}","description":"*Optional*. Extra data to pass to hearers of this message."}],"snippets":{"javascript":{"code":"this.say(${1:'message'}${2:, data})","tab":"say"},"coffeescript":{"code":"@say ${1:'message'}${2:, data}","tab":"say"},"python":{"code":"self.say(${1:'message'}${2:, data})","tab":"say"}}},
  {"name":"shield","type":"function","description":"While using the `shield` action, the unit only takes #{shieldDefensePercent}% of normal damage.","owner":"this","snippets":{"javascript":{"code":"this.shield()","tab":"shield"},"python":{"code":"self.shield()","tab":"shield"}}},
  {"name":"target","type":"object","description":"The current target upon which the #{spriteName} is running its `action` (`\"#{action}\"`). If `target` is set, then `targetPos` is null.","snippets":{"javascript":{"code":"this.target","tab":"target"},"python":{"code":"self.target","tab":"target"}}},
  {"name":"targetPos","type":"object","description":"The current target position toward which the #{spriteName} is running its `action` (`\"#{action}\"`). If `targetPos` is set, then `target` is null.","snippets":{"javascript":{"code":"this.targetPos","tab":"targetPos"},"python":{"code":"self.targetPos","tab":"targetPos"}}},
  {"name":"action","type":"string","description":"The current action the #{spriteName} is running.","owner":"this","snippets":{"javascript":{"code":"this.action","tab":"action"},"python":{"code":"this.action","tab":"action"},"coffeescript":{"code":"@action","tab":"action"},"lua":{"code":"self:action","tab":"action"}}},
  {"name":"jumpTo","type":"function","description":"Perform the `jump` action toward the given target unit or position.","args":[{"name":"target","type":"object","example":"{x: 10, y: 30}","description":"The target unit or position to jump to."}],"snippets":{"javascript":{"code":"this.jumpTo(${1:target})","tab":"jumpTo"},"python":{"code":"self.jumpTo(${1:target})","tab":"jumpTo"}}},
  {"name":"if/else","type":"snippet","description":"The `if` control statement lets you choose whether to run the following code based on whether the condition evaluates truthily.\n\nYou can add an optional `else` clause to run instead when the condition evaluates falsily. You can also chain them together by adding more `else if`s.","example":{"javascript":"if (2 + 2 === 4) {\n    // Code here\n}\nelse if (5 < 10) {\n    // Code here\n}\nelse {\n    // Code here\n}\n","python":"if 2 + 2 == 4:\n    # Code here\nelif (5 < 10):\n    # Code here\nelse:\n    # Code here\n\n"}}
]
